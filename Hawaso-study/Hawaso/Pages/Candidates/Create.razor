@page "/Candidates/Create"

@inject IDbContextFactory<CandidateAppDbContext> _ContextFactory

<PageTitle>Candidate Create</PageTitle>

<h1>Create</h1>

<h4>Candidate</h4>
<hr />


@if(!String.IsNullOrEmpty(StatusMessage))
{
    var statusMessageClass = StatusMessage.StartsWith("Error") ? "danger" : "success";
    <div class="alert alert-@statusMessageClass alert-dismissible" role="alert">
        <button type="button" class="close" data-dismiss="alert"
        aria-label="Close"><span aria-hidden="true">&times;</span></button>
        @StatusMessage
    </div>
}

<div class="row">
    <div class="col-md-4">
        @if (Model is not null)
        {
            <EditForm Model="@Model" OnValidSubmit="FormSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label class="control-label" for="txtFirstName">FirstName</label>
                    @* <input class="form-control" type="text" data-val="true" data-val-length="The field FirstName must be a string with a maximum length of 50." data-val-length-max="50" data-val-required="The FirstName field is required." id="FirstName" maxlength="50" name="FirstName" value="" /> *@
                    <InputText @bind-Value="Model.FirstName" id="txtFirstName" class="form-control" placeholder="Enter FirstName"/>
                    @* <span class="text-danger field-validation-valid" data-valmsg-for="FirstName" data-valmsg-replace="true"></span> *@
                    @* FirstName 유효성 검사 *@
                    <ValidationMessage For="() => Model.FirstName"/>
                </div>
                <div class="form-group">
                    <label class="control-label" for="txtLastName">LastName</label>
                    <InputText @bind-Value="Model.LastName" id="txtLastName" class="form-control" placeholder="Enter LastName" />
                    @* LastName 유효성 검사 *@
                    <ValidationMessage For="@(() =>Model.LastName )" />
                </div>
                <div class="form-group form-check">
                    <label class="form-check-label" for="IsEnrollment">
                        @* <input class="form-check-input" type="checkbox" data-val="true" data-val-required="The IsEntollment field is required." id="IsEntollment" name="IsEntollment" value="true" /> IsEntollment *@
                        <InputCheckbox @bind-Value="Model.IsEntollment" id="IsEnrollment" class="form-check-input" />
                        Is Enrollment
                    </label>
                </div>
                <div class="form-group">
                    <input type="submit" value="Create" class="btn btn-primary" />
                </div>                
            </EditForm>
        }
    </div>
</div>

<div>
    <a href="/Candidates">Back to List</a>
</div>


@code {
    public Candidate? Model { get; set; }
    public string? StatusMessage{ get; set; }

    protected override void OnInitialized()
    {
        // Model = new Candidate
        // {
        //     FirstName = "YJ",
        //     LastName = "Park",
        //     IsEntollment = true,
        // };
        Model = new();
    }

    private async Task FormSubmit()
    {
        try
        {
            if (Model != null)
            {
                using (var context = _ContextFactory.CreateDbContext())
                {
                    context.Candidates.Add(Model);
                    await context.SaveChangesAsync();
                }
                StatusMessage = "Success";
                //StatusMessage = "Error";
            }
        }
        catch(Exception ex)
        {
            StatusMessage = "Error";
        }
        
    }

}
